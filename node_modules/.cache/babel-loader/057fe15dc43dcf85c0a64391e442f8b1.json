{"ast":null,"code":"import _classCallCheck from \"/Users/vodenizeko/Desktop/robots/Robots/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vodenizeko/Desktop/robots/Robots/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/vodenizeko/Desktop/robots/Robots/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/vodenizeko/Desktop/robots/Robots/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/vodenizeko/Desktop/robots/Robots/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/vodenizeko/Desktop/robots/Robots/src/Components/Typed.js\";\nimport React, { Component } from 'react';\n\nvar Typed =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Typed, _Component);\n\n  function Typed() {\n    _classCallCheck(this, Typed);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Typed).apply(this, arguments));\n  }\n\n  _createClass(Typed, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // If you want to pass more options as props, simply add\n      // your desired props to this destructuring assignment.\n      var strings = this.props.strings; // You can pass other options here, such as typing speed, back speed, etc.\n\n      var options = {\n        strings: strings,\n        typeSpeed: 50,\n        backSpeed: 50\n      }; // this.el refers to the <span> in the render() method\n\n      this.typed = new Typed(this.el, options);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Make sure to destroy Typed instance on unmounting\n      // to prevent memory leaks\n      this.typed.destroy();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"Typed.js\"), React.createElement(\"div\", {\n        className: \"type-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          whiteSpace: 'pre'\n        },\n        ref: function ref(el) {\n          _this.el = el;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.typed.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Toggle\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.typed.start();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Start\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.typed.stop();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Stop\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.typed.reset();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Reset\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.typed.destroy();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Destroy\"));\n    }\n  }]);\n\n  return Typed;\n}(Component);\n\nexport { Typed as default };\nReactDOM.render(React.createElement(TypedReactDemo, {\n  strings: ['Some <i>strings</i> are slanted', 'Some <strong>strings</strong> are bold', 'HTML characters &times; &copy;'],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}), document.getElementById('react-root'));","map":{"version":3,"sources":["/Users/vodenizeko/Desktop/robots/Robots/src/Components/Typed.js"],"names":["React","Component","Typed","strings","props","options","typeSpeed","backSpeed","typed","el","destroy","whiteSpace","toggle","start","stop","reset","ReactDOM","render","document","getElementById"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAGqBC,K;;;;;;;;;;;;;wCACC;AACnB;AACC;AAFkB,UAGVC,OAHU,GAGE,KAAKC,KAHP,CAGVD,OAHU,EAIlB;;AACA,UAAME,OAAO,GAAG;AACfF,QAAAA,OAAO,EAAEA,OADM;AAEdG,QAAAA,SAAS,EAAE,EAFG;AAGdC,QAAAA,SAAS,EAAE;AAHG,OAAhB,CALkB,CAUlB;;AACA,WAAKC,KAAL,GAAa,IAAIN,KAAJ,CAAU,KAAKO,EAAf,EAAmBJ,OAAnB,CAAb;AACD;;;2CAEsB;AACtB;AACC;AACA,WAAKG,KAAL,CAAWE,OAAX;AACD;;;6BAEQ;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd,SADT;AAEE,QAAA,GAAG,EAAE,aAACF,EAAD,EAAQ;AAAE,UAAA,KAAI,CAACA,EAAL,GAAUA,EAAV;AAAe,SAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,EAQE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACD,KAAL,CAAWI,MAAX,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARF,EASE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACJ,KAAL,CAAWK,KAAX,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBATF,EAUE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACL,KAAL,CAAWM,IAAX,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,EAWE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACN,KAAL,CAAWO,KAAX,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAXF,EAYE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACP,KAAL,CAAWE,OAAX,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAZF,CADF;AAgBD;;;;EAtCgCT,S;;SAAdC,K;AAyCrBc,QAAQ,CAACC,MAAT,CACC,oBAAC,cAAD;AACG,EAAA,OAAO,EAAE,CACR,iCADQ,EAEP,wCAFO,EAGP,gCAHO,CADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,EAQEC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CARF","sourcesContent":["import React, { Component } from 'react';\n\n\nexport default class Typed extends Component {\n  componentDidMount() {\n  \t// If you want to pass more options as props, simply add\n    // your desired props to this destructuring assignment.\n    const { strings } = this.props;\n    // You can pass other options here, such as typing speed, back speed, etc.\n    const options = {\n    \tstrings: strings,\n      typeSpeed: 50,\n      backSpeed: 50\n    };\n    // this.el refers to the <span> in the render() method\n    this.typed = new Typed(this.el, options);\n  }\n\n  componentWillUnmount() {\n  \t// Make sure to destroy Typed instance on unmounting\n    // to prevent memory leaks\n    this.typed.destroy();\n  }\n\n  render() {\n    return (\n      <div className=\"wrap\">\n        <h1>Typed.js</h1>\n        <div className=\"type-wrap\">\n          <span\n            style={{ whiteSpace: 'pre' }}\n            ref={(el) => { this.el = el; }}\n          />\n        </div>\n        <button onClick={() => this.typed.toggle()}>Toggle</button>\n        <button onClick={() => this.typed.start()}>Start</button>\n        <button onClick={() => this.typed.stop()}>Stop</button>\n        <button onClick={() => this.typed.reset()}>Reset</button>\n        <button onClick={() => this.typed.destroy()}>Destroy</button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n\t<TypedReactDemo\n    strings={[\n    \t'Some <i>strings</i> are slanted',\n      'Some <strong>strings</strong> are bold',\n      'HTML characters &times; &copy;'\n    ]}\n  />,\n  document.getElementById('react-root')\n);"]},"metadata":{},"sourceType":"module"}